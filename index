<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <title>Registro de Clientes - Suporte (Abas)</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    :root {
      --bg: #f8fafc;
      --fg: #1e293b;
      --muted: #64748b;
      --card: #ffffff;
      --brand: #3b82f6;
      --brand-2: #2563eb;
      --accent: #6366f1;
      --border: #e2e8f0;
      --success: #10b981;
      --warning: #f59e0b;
      --error: #ef4444;
      --radius: 12px;
      --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
      --transition: all 0.2s ease;
    }
    body.dark {
      --bg: #0f172a;
      --fg: #f1f5f9;
      --muted: #94a3b8;
      --card: #1e293b;
      --brand: #60a5fa;
      --brand-2: #3b82f6;
      --accent: #818cf8;
      --border: #334155;
      --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.2), 0 2px 4px -1px rgba(0, 0, 0, 0.12);
    }

    * { box-sizing: border-box; }
    body {
      margin: 0;
      font-family: 'Inter', system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif;
      background: var(--bg);
      color: var(--fg);
      transition: var(--transition);
      line-height: 1.5;
    }

    header {
      background: var(--brand);
      color: #fff;
      padding: 16px 24px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      position: sticky;
      top: 0;
      z-index: 10;
      box-shadow: var(--shadow);
    }
    header h1 { 
      margin: 0; 
      font-size: 1.35rem; 
      font-weight: 700;
    }
    .top-actions { display: flex; gap: 12px; align-items: center; }

    button, .btn {
      border: 0;
      background: var(--brand-2);
      color: #fff;
      padding: 10px 16px;
      border-radius: var(--radius);
      cursor: pointer;
      font-weight: 600;
      transition: var(--transition);
      display: inline-flex;
      align-items: center;
      gap: 6px;
      font-size: 0.9rem;
    }
    button:hover { 
      background: var(--brand); 
      transform: translateY(-1px);
      box-shadow: var(--shadow);
    }
    button:active { transform: translateY(0); }

    .container { padding: 24px; max-width: 1200px; margin: 0 auto; }

    /* Tabs */
    .tabs-bar { 
      display: flex; 
      gap: 8px; 
      flex-wrap: wrap; 
      margin-bottom: 16px; 
      padding-bottom: 8px;
      border-bottom: 1px solid var(--border);
    }
    .tab {
      background: var(--card);
      border: 1px solid var(--border);
      padding: 10px 16px;
      border-radius: var(--radius);
      display: flex;
      align-items: center;
      gap: 10px;
      cursor: pointer;
      user-select: none;
      transition: var(--transition);
      box-shadow: var(--shadow);
    }
    .tab.active { 
      background: var(--brand);
      color: white;
      border-color: var(--brand);
    }
    .tab .name { 
      max-width: 220px; 
      overflow: hidden; 
      text-overflow: ellipsis; 
      white-space: nowrap; 
      font-weight: 600; 
      font-size: 0.9rem;
    }
    .tab .close {
      background: transparent; 
      color: inherit; 
      border: 0; 
      padding: 2px 6px; 
      border-radius: 6px;
      font-weight: 700; 
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 20px;
      height: 20px;
    }
    .tab .close:hover { background: rgba(0,0,0,.1); }
    body.dark .tab .close:hover { background: rgba(255,255,255,.15); }

    .form-card { 
      background: var(--card); 
      border: 1px solid var(--border); 
      border-radius: var(--radius); 
      padding: 24px; 
      margin-bottom: 24px; 
      box-shadow: var(--shadow);
    }
    .row { display: flex; flex-wrap: wrap; gap: 20px; margin-bottom: 16px; }
    .col { min-width: 260px; flex: 1; }

    label { 
      font-weight: 600; 
      display: block; 
      margin: 8px 0 6px; 
      font-size: 0.9rem;
      color: var(--fg);
    }
    input[type="text"], select, textarea {
      width: 100%; 
      padding: 12px 14px; 
      border-radius: var(--radius);
      border: 1px solid var(--border); 
      background: var(--card); 
      color: inherit; 
      outline: none;
      transition: var(--transition);
      font-size: 0.95rem;
    }
    input[type="text"]:focus, select:focus, textarea:focus {
      border-color: var(--brand);
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.15);
    }
    textarea { resize: vertical; }

    fieldset { 
      border: 1px dashed var(--border); 
      border-radius: var(--radius); 
      padding: 16px 18px 8px; 
      margin-top: 16px; 
    }
    legend { 
      padding: 0 10px; 
      color: var(--muted); 
      font-weight: 600;
      font-size: 0.9rem;
    }

    .ajustes { display: flex; gap: 24px; }
    .col-ajuste { 
      display: flex; 
      flex-direction: column; 
      gap: 8px; 
      flex: 1; 
    }

    .form-actions { 
      margin-top: 20px; 
      display: flex; 
      gap: 12px; 
      flex-wrap: wrap; 
      padding-top: 16px;
      border-top: 1px solid var(--border);
    }

    /* Checkbox styling */
    input[type="checkbox"] {
      accent-color: var(--brand);
      width: 18px;
      height: 18px;
      margin-right: 8px;
      vertical-align: middle;
    }

    /* Relatos salvos */
    .saved-list { display: flex; flex-direction: column; gap: 12px; }
    .relato-item { 
      display: flex; 
      justify-content: space-between; 
      align-items: center; 
      background: var(--card); 
      border: 1px solid var(--border); 
      border-radius: var(--radius); 
      padding: 16px; 
      transition: var(--transition);
      box-shadow: var(--shadow);
      cursor: grab;
      position: relative;
    }
    .relato-item:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }
    .relato-item.dragging {
      opacity: 0.5;
      box-shadow: 0 0 20px rgba(59, 130, 246, 0.3);
    }
    .relato-item.drag-over {
      border: 2px dashed var(--brand);
      background: rgba(59, 130, 246, 0.05);
    }
    .relato-meta { display: flex; flex-direction: column; flex: 1; }
    .relato-nome { 
      font-weight: 700; 
      cursor: help; 
      font-size: 1.05rem;
      margin-bottom: 4px;
    }
    .relato-data { color: var(--muted); font-size: .85rem; }
    .acoes { display: flex; gap: 12px; align-items: center; }
    .chk { 
      display: inline-flex; 
      align-items: center; 
      gap: 6px; 
      background: transparent; 
      color: inherit; 
      font-size: 0.9rem;
    }
    .drag-handle {
      cursor: grab;
      padding: 8px;
      margin-right: 8px;
      color: var(--muted);
      border-radius: 4px;
      transition: var(--transition);
    }
    .drag-handle:hover {
      background: rgba(0,0,0,0.05);
      color: var(--fg);
    }
    body.dark .drag-handle:hover {
      background: rgba(255,255,255,0.05);
    }

    .muted { color: var(--muted); }
    .empty { 
      border: 1px dashed var(--border); 
      border-radius: var(--radius); 
      padding: 24px; 
      text-align: center; 
      color: var(--muted); 
      background: transparent; 
    }
    .badge { 
      display: inline-block; 
      padding: 4px 10px; 
      border-radius: 999px; 
      background: var(--success); 
      color: white; 
      font-size: .75rem; 
      margin-left: 8px;
      font-weight: 600;
    }
    body.dark .badge { background: var(--success); }
    
    /* Novos estilos para o layout reorganizado */
    .row-top { display: flex; flex-wrap: wrap; gap: 20px; margin-bottom: 20px; }
    .col-nome { min-width: 260px; flex: 1; }
    .col-relato { min-width: 260px; flex: 2; }
    .row-middle { display: flex; flex-wrap: wrap; gap: 20px; margin-bottom: 20px; }
    .col-middle { min-width: 180px; flex: 1; }
    
    .textarea-relato {
      height: 120px;
    }

    h2 {
      margin-top: 32px;
      margin-bottom: 16px;
      font-weight: 700;
      font-size: 1.5rem;
      color: var(--fg);
      padding-bottom: 8px;
      border-bottom: 1px solid var(--border);
    }

    /* Responsividade melhorada */
    @media (max-width: 768px) {
      .container {
        padding: 16px;
      }
      
      .row, .row-top, .row-middle {
        flex-direction: column;
        gap: 12px;
      }
      
      .ajustes {
        flex-direction: column;
        gap: 12px;
      }
      
      .relato-item {
        flex-direction: column;
        align-items: flex-start;
        gap: 12px;
      }
      
      .acoes {
        align-self: stretch;
        justify-content: space-between;
      }
      
      header {
        flex-direction: column;
        gap: 12px;
        align-items: flex-start;
      }
      
      .top-actions {
        width: 100%;
        justify-content: space-between;
      }
    }

    /* Animações suaves */
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    .form-card, .relato-item {
      animation: fadeIn 0.3s ease-out;
    }
  </style>
</head>
<body>
  <header>
    <h1>Registro de Clientes – Suporte</h1>
    <div class="top-actions">
      <button id="btnModo" title="Alternar modo claro/escuro" onclick="toggleModo()">Modo Escuro/Claro</button>
      <button onclick="novaAba()">Novo Cliente</button>
    </div>
  </header>

  <div class="container">
    <!-- Abas -->
    <div class="tabs-bar" id="tabsBar"></div>

    <!-- Área das abas (formularios dinâmicos) -->
    <div id="tabsContent"></div>

    <!-- Lista de relatos salvos -->
    <h2>Relatos Salvos</h2>
    <div id="listaRelatos" class="saved-list"></div>
  </div>

  <!-- TEMPLATE DO FORMULÁRIO (completo) -->
  <template id="tplForm">
    <div class="form-card">
      <!-- Linha superior: Nome do cliente e Relato -->
      <div class="row-top">
        <div class="col-nome">
          <label>Nome do Cliente</label>
          <input type="text" data-field="nome" placeholder="Ex: HUGO ALBERTO BRACHO SANTOS">
          
          <label>Problema relatado</label>
          <select data-field="problema">
            <option value="sem acesso">Sem acesso</option>
            <option value="Acesso lento">Acesso lento</option>
            <option value="quedas">Quedas</option>
            <option value="Outros problemas">Outros problemas</option>
          </select>
        </div>
        <div class="col-relato">
          <label>Relato</label>
          <textarea data-field="relato" class="textarea-relato" placeholder="Descrever aqui TUDO que o cliente disser em relação a conexão dele"></textarea>
        </div>
      </div>

      <!-- Linha do meio: Autenticação, Status da Rede e Sinal do Cliente -->
      <div class="row-middle">
        <div class="col-middle">
          <label>Autenticação</label>
          <select data-field="autenticacao">
            <option value="Cliente Online">Cliente Online</option>
            <option value="Cliente Offline">Cliente Offline</option>
          </select>
        </div>
        <div class="col-middle">
          <label>Status da Rede</label>
          <select data-field="status">
            <option value="ONU - OK">ONU - OK</option>
            <option value="ONU - Sem energia">ONU - Sem energia</option>
            <option value="ONU - LOS">ONU - LOS</option>
            <option value="ONU - Sinal atenuado">ONU - Sinal atenuado</option>
          </select>
        </div>
        <div class="col-middle">
          <label>Sinal do Cliente</label>
          <input type="text" data-field="sinal" placeholder="Ex: -65 dBm">
        </div>
      </div>

      <!-- ADIÇÃO: Campos extras exibidos quando "Acesso lento" -->
      <div class="row" data-extra="acesso-lento" style="display:none;">
        <div class="col">
          <label>Aparelhos</label>
          <input type="text" data-field="aparelhos" placeholder="Ex: Smart TV, Celular, Notebook">
        </div>
        <div class="col">
          <label>Aplicativos</label>
          <input type="text" data-field="aplicativos" placeholder="Ex: Netflix, YouTube, WhatsApp">
        </div>
      </div>

      <fieldset>
        <legend>Selecione os ajustes realizados</legend>

        <div class="ajustes" data-field="ajustes">
          <div class="col-ajuste">
            <label><input type="checkbox" value="NetSphere ligado"> NetSphere ligado</label>
            <label><input type="checkbox" value="Mesh Wifi ligado"> Mesh Wifi ligado</label>
            <label><input type="checkbox" value="Servidor DHCP habilitado"> Servidor DHCP habilitado</label>
            <label><input type="checkbox" value="WAN duplicado &gt; excluído"> WAN duplicado &gt; excluído</label>
            <label><input type="checkbox" value="DHCPv6 desabilitado"> DHCPv6 desabilitado</label>
            <label><input type="checkbox" value="QoS &gt; Switch desligado"> QoS &gt; Switch desligado</label>
            <label><input type="checkbox" value="Segurança &gt; médio"> Segurança &gt; médio</label>
            <label><input type="checkbox" value="ALG ligado"> ALG ligado</label>
            <label><input type="checkbox" value="SNTP &gt; fuso alterado para Brasília"> SNTP &gt; fuso alterado para Brasília</label>
            <label><input type="checkbox" value="Multicast configurado"> Multicast configurado</label>
            <label><input type="checkbox" value="Horário de verão desabilitado"> Horário de verão desabilitado</label>
            <label><input type="checkbox" value="Troca de canal na rede 2.4g"> Troca de canal na rede 2.4g</label>
            <label><input type="checkbox" value="Troca de canal na rede 5g"> Troca de canal na rede 5g</label>
          </div>
          <div class="col-ajuste">
            <label><input type="checkbox" value="Largura do canal ajustada em 20MHz"> Largura do canal ajustada em 20MHz</label>
            <label><input type="checkbox" value="Largura do canal ajustada em 80MHz"> Largura do canal ajustada em 80MHz</label>
            <label><input type="checkbox" value="SGI desligado"> SGI desligado</label>
            <label><input type="checkbox" value="SGI ligado"> SGI ligado</label>
            <label><input type="checkbox" value="Modo: Misturadas (802.11a/n/ac)"> Modo: Misturadas (802.11a/n/ac)</label>
            <label><input type="checkbox" value="Band Steering desligado"> Band Steering desligado</label>
            <label><input type="checkbox" value="UPnP ligado"> UPnP ligado</label>
            <label><input type="checkbox" value="MAC do roteador apagado"> MAC do roteador apagado</label>
            <label><input type="checkbox" value="Firmware atualizado"> Firmware atualizado </label>
            <label><input type="checkbox" value="Downgrade do Firmware"> Downgrade do Firmware </label>
            <label><input type="checkbox" value="Reboot roteador"> Reboot roteador </label>
            <label><input type="checkbox" value="Reboot ONU"> Reboot ONU </label>
          </div>
        </div>
      </fieldset>
      
      <!-- NOVO CAMPO: Ajustes Atípicos -->
      <div class="row">
        <div class="col">
          <label>Ajustes Atípicos</label>
          <textarea data-field="ajustesAtipicos" placeholder="Descreva ajustes não comuns realizados..."></textarea>
        </div>
      </div>
      
      <!-- NOVO CAMPO: Ponto Extra e Chamados Anteriores -->
      <div class="form-actions">
        <button type="button" id="btnPontoExtra">Ponto Extra</button>
        <button type="button" id="btnChamadosAnteriores">Chamados Anteriores</button>
      </div>
      
      <!-- NOVO: Seção de Chamados Anteriores -->
      <fieldset id="chamadosAnterioresBox" style="display:none;" data-field="chamadosanteriores">
        <legend>Chamados Anteriores</legend>
        <div class="row">
          <div class="col">
            <label>Total de Chamados Últimos 30d:</label>
            <input type="text" data-field="totalChamados30d" placeholder="Ex: 3 chamados">
          </div>
        </div>
        <div class="row">
          <div class="col">
            <label>Encerramento Último Chamado:</label>
            <textarea data-field="encerramentoUltimoChamado" placeholder="Descreva o encerramento do último chamado..."></textarea>
          </div>
        </div>
        <div class="row">
          <div class="col">
            <label>Técnico Responsável:</label>
            <input type="text" data-field="tecnicoResponsavel" placeholder="Ex: João Silva">
          </div>
        </div>
      </fieldset>

      <fieldset id="pontoExtraBox" style="display:none;" data-field="pontoextra">
        <legend>Ajustes no Ponto Extra</legend>
        <div class="col-ajuste">
          <label><input type="checkbox" value="Largura do canal ajustada em 20MHz"> Largura do canal ajustada em 20MHz</label>
          <label><input type="checkbox" value="Largura do canal ajustada em 80MHz"> Largura do canal ajustada em 80MHz</label>
          <label><input type="checkbox" value="SGI desligado"> SGI desligado</label>
          <label><input type="checkbox" value="SGI ligado"> SGI ligado</label>
          <label><input type="checkbox" value="Modo: Misturadas (802.11a/n/ac)"> Modo: Misturadas (802.11a/n/ac)</label>
          <label><input type="checkbox" value="UPnP ligado"> UPnP ligado</label>
          <label><input type="checkbox" value="Firmware atualizado"> Firmware atualizado</label>
          <label><input type="checkbox" value="Downgrade do Firmware"> Downgrade do Firmware</label>
          <label><input type="checkbox" value="Reboot ponto extra"> Reboot ponto extra</label>
          <label><input type="checkbox" value="Troca de canal na rede 2.4g"> Troca de canal na rede 2.4g</label>
          <label><input type="checkbox" value="Troca de canal na rede 5g"> Troca de canal na rede 5g</label>
        </div>
      </fieldset>

      <div class="row">
        <div class="col">
          <label>Resultado final</label>
          <select data-field="resultado" id="resultadoSelect">
            <option value="cliente relatou normalização">Normalizado</option>
            <option value="validar no local">Validar no local</option>
            <option value="cliente vai monitorar">Cliente vai monitorar</option>
            <option value="cliente inativo">Inativo</option>
          </select>
        </div>
        <div class="col">
          <label>Contato (opcional)</label>
          <input type="text" data-field="contato" placeholder="Ex: (51)99408-2711">
        </div>
      </div>

      <!-- NOVO CAMPO: Localização (aparece apenas quando "Validar no local" é selecionado) -->
      <div class="row" id="localizacaoBox" style="display:none;">
        <div class="col">
          <label>Localização</label>
          <input type="text" data-field="localizacao" placeholder="Ex: 29.674039, -51.083409">
        </div>
      </div>

      <div class="form-actions">
        <button data-action="salvar">Salvar</button>
        <button data-action="limpar" type="button">Limpar</button>
      </div>
    </div>
  </template>

  <script>
    // ------------ Estado ------------
    let abas = []; // [{id, nomeTemp}]
    let abaAtiva = null;
    const relatosSalvos = [];
    let draggedItem = null;

    // ------------ Util ------------
    const qs = (sel, ctx=document) => ctx.querySelector(sel);
    const qsa = (sel, ctx=document) => Array.from(ctx.querySelectorAll(sel));
    const uid = () => 'aba_' + Math.random().toString(36).slice(2,10);

    // ------------ Modo ------------
    function toggleModo() {
      document.body.classList.toggle('dark');
      localStorage.setItem('modo', document.body.classList.contains('dark') ? 'dark' : 'light');
    }

    // ------------ Persistência das abas abertas ------------
    function persistirAbas() {
      try {
        const estados = abas.map(a => {
          const pane = qs(`[data-pane="${a.id}"]`);
          if (!pane) return a;
          const dados = {};

          // percorre cada elemento marcado com data-field
          qsa('[data-field]', pane).forEach(el => {
            const nomeCampo = el.dataset.field;
            if (!nomeCampo) return;

            // se o elemento contém checkboxes (ex: fieldset ou div)
            const cbs = Array.from(el.querySelectorAll('input[type="checkbox"]'));
            if (cbs.length) {
              dados[nomeCampo] = cbs.filter(cb => cb.checked).map(cb => cb.value);
              return;
            }

            // se o próprio elemento é um input/select/textarea com valor
            if (el.matches('input,select,textarea')) {
              dados[nomeCampo] = el.value;
              return;
            }

            // fallback
            dados[nomeCampo] = el.value ?? '';
          });

          return { ...a, dados };
        });
        localStorage.setItem('abasAbertas', JSON.stringify(estados));
      } catch (e) { console.error('Erro ao persistir abas:', e); }
    }

    function carregarAbas() {
      try {
        const raw = localStorage.getItem('abasAbertas');
        if (!raw) return;
        const arr = JSON.parse(raw);
        if (Array.isArray(arr)) {
          arr.forEach(item => {
            abas.push({ id: item.id, nomeTemp: item.nomeTemp || 'Novo Cliente' });
            renderAbas();
            abrirFormulario(item.id);
            const pane = qs(`[data-pane="${item.id}"]`);
            if (pane && item.dados) {
              qsa('[data-field]', pane).forEach(el => {
                const nomeCampo = el.dataset.field;
                const val = item.dados ? item.dados[nomeCampo] : undefined;
                if (Array.isArray(val)) {
                  // é um conjunto de checkboxes
                  el.querySelectorAll('input[type="checkbox"]').forEach(cb => cb.checked = val.includes(cb.value));
                } else {
                  if (el.matches('input,select,textarea')) el.value = val ?? '';
                }
              });
              
              // Atualizar nome da aba após carregar os dados
              const nomeInput = qs('[data-field="nome"]', pane);
              if (nomeInput && nomeInput.value) {
                const aba = abas.find(x => x.id === item.id);
                if (aba) {
                  aba.nomeTemp = nomeInput.value.trim() || 'Novo Cliente';
                }
              }
              
              // Atualizar visibilidade do ponto extra
              const pontoExtraBox = qs('#pontoExtraBox', pane);
              if (pontoExtraBox && item.dados.pontoextra && item.dados.pontoextra.length > 0) {
                pontoExtraBox.style.display = 'block';
              }
              
              // Atualizar visibilidade dos chamados anteriores
              const chamadosAnterioresBox = qs('#chamadosAnterioresBox', pane);
              if (chamadosAnterioresBox && item.dados.chamadosanteriores && 
                  (item.dados.totalChamados30d || item.dados.encerramentoUltimoChamado || item.dados.tecnicoResponsavel)) {
                chamadosAnterioresBox.style.display = 'block';
              }
              
              // Atualizar visibilidade dos campos extras de acesso lento
              const problemaSelect = qs('[data-field="problema"]', pane);
              if (problemaSelect && problemaSelect.value === "Acesso lento") {
                const extrasRow = qs('[data-extra="acesso-lento"]', pane);
                if (extrasRow) {
                  extrasRow.style.display = "flex";
                }
              }
              
              // Atualizar visibilidade do campo de localização
              const resultadoSelect = qs('[data-field="resultado"]', pane);
              if (resultadoSelect && resultadoSelect.value === "validar no local") {
                const localizacaoBox = qs('#localizacaoBox', pane);
                if (localizacaoBox) {
                  localizacaoBox.style.display = "flex";
                }
              }
            }
          });
          if (arr.length) ativarAba(arr[arr.length - 1].id);
        }
      } catch(e) { console.error(e); }
    }

    // ------------ Abas ------------
    function novaAba() {
      const id = uid();
      abas.push({ id, nomeTemp: 'Novo Cliente' });
      renderAbas();
      abrirFormulario(id);
      ativarAba(id);
      persistirAbas();
    }

    function fecharAba(id) {
      const i = abas.findIndex(a => a.id === id);
      if (i >= 0) abas.splice(i, 1);
      const pane = qs(`[data-pane="${id}"]`);
      if (pane) pane.remove();
      if (abaAtiva === id) {
        abaAtiva = abas.length ? abas[abas.length-1].id : null;
      }
      renderAbas();
      mostrarPaneAtivo();
      persistirAbas();
    }

    function ativarAba(id) {
      abaAtiva = id;
      renderAbas();
      mostrarPaneAtivo();
    }

    function renderAbas() {
      const bar = qs('#tabsBar');
      bar.innerHTML = '';
      abas.forEach(a => {
        const b = document.createElement('div');
        b.className = 'tab' + (a.id === abaAtiva ? ' active' : '');
        b.onclick = () => ativarAba(a.id);
        b.innerHTML = `
          <span class="name" title="${a.nomeTemp || ''}">${a.nomeTemp || ''}</span>
          <button class="close" title="Fechar" onclick="event.stopPropagation(); fecharAba('${a.id}')">×</button>
        `;
        bar.appendChild(b);
      });
    }

    function mostrarPaneAtivo() {
      qsa('[data-pane]').forEach(p => p.style.display = 'none');
      if (!abaAtiva) return;
      const pane = qs(`[data-pane="${abaAtiva}"]`);
      if (pane) pane.style.display = 'block';
    }

    function abrirFormulario(id) {
      const host = qs('#tabsContent');
      const frm = qs('#tplForm').content.cloneNode(true);
      const wrapper = document.createElement('div');
      wrapper.setAttribute('data-pane', id);
      wrapper.appendChild(frm);

      // append primeiro (garante que elementos fazem parte do DOM do wrapper)
      host.appendChild(wrapper);

      // Eventos do formulário desta aba (somente se os elementos existirem)
      const nomeInput = qs('[data-field="nome"]', wrapper);
      if (nomeInput) {
        nomeInput.addEventListener('input', (e) => {
          const aba = abas.find(x => x.id === id);
          aba.nomeTemp = e.target.value.trim() || 'Novo Cliente';
          renderAbas();
          persistirAbas();
        });
      }

      // Mostrar/ocultar campos extras de "Acesso lento"
      const problemaSelect = qs('[data-field="problema"]', wrapper);
      if (problemaSelect) {
        const toggleExtras = () => {
          const extrasRow = qs('[data-extra="acesso-lento"]', wrapper);
          if (!extrasRow) return;
          extrasRow.style.display = (problemaSelect.value === "Acesso lento") ? "flex" : "none";
          persistirAbas();
        };
        problemaSelect.addEventListener('change', toggleExtras);
        toggleExtras(); // estado inicial
      }

      // Mostrar/ocultar campo de localização para "Validar no local"
      const resultadoSelect = qs('[data-field="resultado"]', wrapper);
      if (resultadoSelect) {
        const toggleLocalizacao = () => {
          const localizacaoBox = qs('#localizacaoBox', wrapper);
          if (!localizacaoBox) return;
          localizacaoBox.style.display = (resultadoSelect.value === "validar no local") ? "flex" : "none";
          persistirAbas();
        };
        resultadoSelect.addEventListener('change', toggleLocalizacao);
        toggleLocalizacao(); // estado inicial
      }

      // Botões (salvar, limpar)
      const btnSalvar = qs('[data-action="salvar"]', wrapper);
      if (btnSalvar) btnSalvar.addEventListener('click', () => salvarRelatoDaAba(id, wrapper));
      const btnLimpar = qs('[data-action="limpar"]', wrapper);
      if (btnLimpar) btnLimpar.addEventListener('click', () => limparForm(wrapper));

      // Botão de ponto extra
      const btnPontoExtra = qs('#btnPontoExtra', wrapper);
      if (btnPontoExtra) {
        btnPontoExtra.addEventListener('click', function() {
          togglePontoExtra(this, wrapper);
        });
      }

      // NOVO: Botão de chamados anteriores
      const btnChamadosAnteriores = qs('#btnChamadosAnteriores', wrapper);
      if (btnChamadosAnteriores) {
        btnChamadosAnteriores.addEventListener('click', function() {
          toggleChamadosAnteriores(this, wrapper);
        });
      }

      // Persistir alterações automaticamente ao digitar/mudar
      qsa('[data-field]', wrapper).forEach(el => {
        // para elementos que são contêineres with checkboxes, adiciona listeners nos checkboxes
        const cbs = el.querySelectorAll ? Array.from(el.querySelectorAll('input[type="checkbox"]')) : [];
        if (cbs.length) {
          cbs.forEach(cb => cb.addEventListener('change', persistirAbas));
        }
        // se o próprio elemento for um input/select/textarea
        if (el.matches && el.matches('input,select,textarea')) {
          el.addEventListener('input', persistirAbas);
          el.addEventListener('change', persistirAbas);
        }
      });

      // atualizar persisted state após criar o formulário
      persistirAbas();
    }

    function limparForm(scope) {
      const nomeEl = qs('[data-field="nome"]', scope);
      if (nomeEl) nomeEl.value = '';
      const relatoEl = qs('[data-field="relato"]', scope);
      if (relatoEl) relatoEl.value = '';
      const problemaEl = qs('[data-field="problema"]', scope);
      if (problemaEl) problemaEl.selectedIndex = 0;
      const autenticacaoEl = qs('[data-field="autenticacao"]', scope);
      if (autenticacaoEl) autenticacaoEl.selectedIndex = 0;
      const statusEl = qs('[data-field="status"]', scope);
      if (statusEl) statusEl.selectedIndex = 0;
      const sinalEl = qs('[data-field="sinal"]', scope);
      if (sinalEl) sinalEl.value = '';
      const extrasRow = qs('[data-extra="acesso-lento"]', scope);
      if (extrasRow) {
        extrasRow.style.display = 'none';
        const ap = qs('[data-field="aparelhos"]', scope);
        const app = qs('[data-field="aplicativos"]', scope);
        if (ap) ap.value = '';
        if (app) app.value = '';
      }
      const resultadoEl = qs('[data-field="resultado"]', scope);
      if (resultadoEl) resultadoEl.selectedIndex = 0;
      const contatoEl = qs('[data-field="contato"]', scope);
      if (contatoEl) contatoEl.value = '';
      const ajustesAtipicosEl = qs('[data-field="ajustesAtipicos"]', scope);
      if (ajustesAtipicosEl) ajustesAtipicosEl.value = '';
      const localizacaoEl = qs('[data-field="localizacao"]', scope);
      if (localizacaoEl) localizacaoEl.value = '';
      const localizacaoBox = qs('#localizacaoBox', scope);
      if (localizacaoBox) localizacaoBox.style.display = 'none';

      // Limpar campos dos chamados anteriores
      const totalChamadosEl = qs('[data-field="totalChamados30d"]', scope);
      if (totalChamadosEl) totalChamadosEl.value = '';
      const encerramentoChamadoEl = qs('[data-field="encerramentoUltimoChamado"]', scope);
      if (encerramentoChamadoEl) encerramentoChamadoEl.value = '';
      const tecnicoResponsavelEl = qs('[data-field="tecnicoResponsavel"]', scope);
      if (tecnicoResponsavelEl) tecnicoResponsavelEl.value = '';

      // desmarcar checkboxes
      const ajustesField = qs('[data-field="ajustes"]', scope);
      if (ajustesField) ajustesField.querySelectorAll('input[type="checkbox"]').forEach(cb => cb.checked = false);
      const pontoField = qs('[data-field="pontoextra"]', scope);
      if (pontoField) {
        pontoField.querySelectorAll('input[type="checkbox"]').forEach(cb => cb.checked = false);
        pontoField.style.display = 'none';
      }
      
      // Ocultar chamados anteriores
      const chamadosAnterioresBox = qs('#chamadosAnterioresBox', scope);
      if (chamadosAnterioresBox) chamadosAnterioresBox.style.display = 'none';

      persistirAbas();
    }

    // Mapeia o valor del select para o texto desejado
    function fraseResultado(valor) {
      switch (valor) {
        case "cliente relatou normalização":
          return "Após validações cliente relatou normalização";
        case "validar no local":
          return "Favor validar no local";
        case "cliente vai monitorar":
          return "Após validações cliente vai monitorar";
        case "cliente inativo":
          return "Após validações cliente ficou inativo";
        default:
          return valor || "";
      }
    }

    function salvarRelatoDaAba(id, scope) {
      const nome = qs('[data-field="nome"]', scope)?.value.trim();
      if (!nome) { alert('Digite o nome do cliente!'); return; }

      const relatoOpc = qs('[data-field="relato"]', scope)?.value.trim() || '';
      const problema = qs('[data-field="problema"]', scope)?.value || '';
      const autenticacao = qs('[data-field="autenticacao"]', scope)?.value || '';
      const status = qs('[data-field="status"]', scope)?.value || '';
      const sinal = qs('[data-field="sinal"]', scope)?.value.trim() || '';

      if (!sinal) { alert('Digite o sinal do cliente!'); return; }

      const aparelhos = qs('[data-field="aparelhos"]', scope)?.value.trim() || "";
      const aplicativos = qs('[data-field="aplicativos"]', scope)?.value.trim() || "";
      const ajustesAtipicos = qs('[data-field="ajustesAtipicos"]', scope)?.value.trim() || "";
      const localizacao = qs('[data-field="localizacao"]', scope)?.value.trim() || "";

      const resultado = qs('[data-field="resultado"]', scope)?.value || '';
      const contato = qs('[data-field="contato"]', scope)?.value.trim() || '';

      // NOVO: Campos dos chamados anteriores
      const totalChamados30d = qs('[data-field="totalChamados30d"]', scope)?.value.trim() || "";
      const encerramentoUltimoChamado = qs('[data-field="encerramentoUltimoChamado"]', scope)?.value.trim() || "";
      const tecnicoResponsavel = qs('[data-field="tecnicoResponsavel"]', scope)?.value.trim() || "";

      const ajustes = Array.from(qs('[data-field="ajustes"]', scope)?.querySelectorAll('input[type="checkbox"]') || [])
        .filter(cb => cb.checked).map(cb => cb.value);

      const pontoextra = Array.from(qs('[data-field="pontoextra"]', scope)?.querySelectorAll('input[type="checkbox"]') || [])
        .filter(cb => cb.checked).map(cb => cb.value);

      let txt = `${nome.toUpperCase()}`;
      
      // NOVO: Adicionar informações dos chamados anteriores no início COM LINHA EM BRANCO ENTRE ELES
      if (totalChamados30d || encerramentoUltimoChamado || tecnicoResponsavel) {
        txt += `\n`;
        if (totalChamados30d) txt += `\nTotal de Chamados Últimos 30d: ${totalChamados30d}\n`;
        if (encerramentoUltimoChamado) txt += `\nEncerramento Último Chamado: ${encerramentoUltimoChamado}\n`;
        if (tecnicoResponsavel) txt += `\nTécnico Responsável: ${tecnicoResponsavel}`;
      }

      // Alteração: "Relato:" para "DOR DO CLIENTE (Descrever aqui TUDO que o cliente disser em relação a conexão dele):"
      if (relatoOpc) txt += `\n\nDOR DO CLIENTE (Descrever aqui TUDO que o cliente disser em relação a conexão dele):\n${relatoOpc}`;
      txt += `\n\nProblema relatado: ${problema}\nAutenticação: ${autenticacao}\nStatus da Rede: ${status}`;
      if (sinal) txt += `\nSinal do Cliente: ${sinal}`;

      if (problema === "Acesso lento") {
        if (aparelhos) txt += `\nAparelhos: ${aparelhos}`;
        if (aplicativos) txt += `\nAplicativos: ${aplicativos}`;
      }

      if (ajustes.length) txt += `\n\nFeito ajustes\n${ajustes.join('\n')}`;
      // Ajustes atípicos sem título - apenas o conteúdo
      if (ajustesAtipicos) txt += `\n${ajustesAtipicos}`;
      if (pontoextra.length) txt += `\n\nPonto Extra\n${pontoextra.join('\n')}`;
      txt += `\n\n${fraseResultado(resultado)}`;
      if (resultado === "validar no local" && localizacao) txt += `\nLocalização: ${localizacao}`;
      if (contato) txt += `\nContato: ${contato}`;

      const novoRegistro = {
        nome,
        relatoCompleto: txt,
        relatoOriginal: { 
          nome, 
          relato: relatoOpc, 
          problema, 
          autenticacao, 
          status, 
          sinal, 
          resultado, 
          contato, 
          ajustes, 
          pontoextra, // Incluindo pontoextra no relatoOriginal
          aparelhos, 
          aplicativos,
          ajustesAtipicos, // Incluindo ajustes atípicos
          localizacao, // Incluindo localização
          // NOVO: Incluindo campos dos chamados anteriores
          totalChamados30d,
          encerramentoUltimoChamado,
          tecnicoResponsavel
        },
        registrado: false,
        ts: Date.now()
      };

      // Se for edição, atualiza o registro existente
      if (scope.dataset.editIndex !== undefined) {
        const idx = parseInt(scope.dataset.editIndex, 10);
        if (!isNaN(idx) && relatosSalvos[idx]) {
          relatosSalvos[idx] = { ...relatosSalvos[idx], ...novoRegistro };
          persistirRelatos();
          desenharRelatos();
          fecharAba(id);
          return;
        }
      }

      relatosSalvos.unshift(novoRegistro);
      persistirRelatos();
      desenharRelatos();

      // Fechar aba automaticamente
      fecharAba(id);
    }

    function togglePontoExtra(btn, wrapper) {
      const box = qs('#pontoExtraBox', wrapper);
      if (!box) return;
      box.style.display = (box.style.display === 'none') ? 'block' : 'none';
      persistirAbas();
    }

    // NOVA FUNÇÃO: Alternar visibilidade dos chamados anteriores
    function toggleChamadosAnteriores(btn, wrapper) {
      const box = qs('#chamadosAnterioresBox', wrapper);
      if (!box) return;
      box.style.display = (box.style.display === 'none') ? 'block' : 'none';
      persistirAbas();
    }

    // ------------ Relatos Salvos com Drag & Drop ------------
    function desenharRelatos() {
      const box = qs('#listaRelatos');
      box.innerHTML = '';
      if (!relatosSalvos.length) {
        box.innerHTML = `<div class="empty">Nenhum relato salvo ainda. Use <b>+ Novo Cliente</b> para começar.</div>`;
        return;
      }
      relatosSalvos.forEach((item, i) => {
        const div = document.createElement('div');
        div.className = 'relato-item';
        div.setAttribute('data-index', i);
        div.draggable = true;
        
        const data = new Date(item.ts);
        const dataFmt = data.toLocaleString('pt-BR');

        div.innerHTML = `
          <div class="drag-handle" title="Arrastar para reordenar">⋮⋮</div>
          <div class="relato-meta">
            <div class="relato-nome">
              ${String(item.nome || '').toUpperCase()} ${item.registrado ? '<span class="badge">Registrado</span>' : ''}
            </div>
            <div class="relato-data">${dataFmt}</div>
          </div>
          <div class="acoes">
            <label class="chk">
              <input type="checkbox" ${item.registrado ? 'checked' : ''} onchange="marcarRegistrado(${i}, this.checked)" />
              Registrado
            </label>
            <button onclick="editarRelato(${i})">Editar</button>
            <button onclick="copiarRelato(${i})">Copiar</button>
            <button onclick="deletarRelato(${i})">Deletar</button>
          </div>
        `;
        const nomeEl = div.querySelector('.relato-nome');
        if (nomeEl) nomeEl.title = item.relatoCompleto || '';
        
        // Adicionar eventos de drag & drop
        div.addEventListener('dragstart', handleDragStart);
        div.addEventListener('dragover', handleDragOver);
        div.addEventListener('dragenter', handleDragEnter);
        div.addEventListener('dragleave', handleDragLeave);
        div.addEventListener('drop', handleDrop);
        div.addEventListener('dragend', handleDragEnd);
        
        box.appendChild(div);
      });
    }

    // Funções de Drag & Drop
    function handleDragStart(e) {
      draggedItem = this;
      this.classList.add('dragging');
      e.dataTransfer.effectAllowed = 'move';
      e.dataTransfer.setData('text/plain', this.getAttribute('data-index'));
    }

    function handleDragOver(e) {
      e.preventDefault();
      e.dataTransfer.dropEffect = 'move';
      return false;
    }

    function handleDragEnter(e) {
      this.classList.add('drag-over');
    }

    function handleDragLeave(e) {
      this.classList.remove('drag-over');
    }

    function handleDrop(e) {
      e.preventDefault();
      e.stopPropagation();
      
      if (draggedItem !== this) {
        const fromIndex = parseInt(draggedItem.getAttribute('data-index'));
        const toIndex = parseInt(this.getAttribute('data-index'));
        
        // Mover o item no array
        const [movedItem] = relatosSalvos.splice(fromIndex, 1);
        relatosSalvos.splice(toIndex, 0, movedItem);
        
        // Persistir e redesenhar
        persistirRelatos();
        desenharRelatos();
      }
      
      this.classList.remove('drag-over');
      return false;
    }

    function handleDragEnd(e) {
      this.classList.remove('dragging');
      qsa('.relato-item').forEach(item => {
        item.classList.remove('drag-over');
      });
      draggedItem = null;
    }

    function copiarRelato(i) {
      const textoFull = relatosSalvos[i].relatoCompleto || '';
      let linhas = textoFull.split('\n');
      if (linhas.length) linhas.shift();
      const semNome = linhas.join('\n').trim();
      navigator.clipboard.writeText(semNome).then(() => alert('Relato (sem nome) copiado para a área de transferência!'));
    }

    function deletarRelato(i) {
      if (!confirm('Deseja realmente deletar este relato?')) return;
      relatosSalvos.splice(i, 1);
      persistirRelatos();
      desenharRelatos();
    }

    function marcarRegistrado(i, val) {
      relatosSalvos[i].registrado = val;
      persistirRelatos();
      desenharRelatos();
    }

    function editarRelato(i) {
      const item = relatosSalvos[i];
      const id = uid();
      abas.push({ id, nomeTemp: item?.nome || 'Novo Cliente' });
      renderAbas();
      abrirFormulario(id);

      const wrapper = qs(`[data-pane="${id}"]`);
      if (!wrapper) return;

      wrapper.dataset.editIndex = String(i);

      const orig = item.relatoOriginal || {};

      const set = (sel, val) => { const el = qs(sel, wrapper); if (el) el.value = val ?? ''; };

      set('[data-field="nome"]', orig.nome ?? item.nome ?? '');
      set('[data-field="relato"]', orig.relato ?? '');
      set('[data-field="problema"]', orig.problema ?? 'sem acesso');
      set('[data-field="autenticacao"]', orig.autenticacao ?? 'Cliente Online');
      set('[data-field="status"]', orig.status ?? 'ONU - OK');
      set('[data-field="sinal"]', orig.sinal ?? '');
      set('[data-field="resultado"]', orig.resultado ?? 'cliente relatou normalização');
      set('[data-field="contato"]', orig.contato ?? '');
      set('[data-field="ajustesAtipicos"]', orig.ajustesAtipicos ?? '');
      set('[data-field="localizacao"]', orig.localizacao ?? '');
      
      // NOVO: Preencher campos dos chamados anteriores
      set('[data-field="totalChamados30d"]', orig.totalChamados30d ?? '');
      set('[data-field="encerramentoUltimoChamado"]', orig.encerramentoUltimoChamado ?? '');
      set('[data-field="tecnicoResponsavel"]', orig.tecnicoResponsavel ?? '');

      // Disparar evento change para atualizar campos extras de acesso lento
      const problemaSel = qs('[data-field="problema"]', wrapper);
      if (problemaSel) {
        const event = new Event('change');
        problemaSel.dispatchEvent(event);
      }

      if ((orig.problema ?? '') === 'Acesso lento') {
        set('[data-field="aparelhos"]', orig.aparelhos ?? '');
        set('[data-field="aplicativos"]', orig.aplicativos ?? '');
      }

      const ajustesOrig = Array.isArray(orig.ajustes) ? orig.ajustes : [];
      qsa('[data-field="ajustes"] input[type="checkbox"]', wrapper).forEach(cb => {
        cb.checked = ajustesOrig.includes(cb.value);
      });

      const pontoOrig = Array.isArray(orig.pontoextra) ? orig.pontoextra : [];
      qsa('[data-field="pontoextra"] input[type="checkbox"]', wrapper).forEach(cb => {
        cb.checked = pontoOrig.includes(cb.value);
      });

      // Mostrar o campo de ponto extra se houver ajustes salvos
      if (pontoOrig.length > 0) {
        const pontoExtraBox = qs('#pontoExtraBox', wrapper);
        if (pontoExtraBox) {
          pontoExtraBox.style.display = 'block';
        }
      }

      // Mostrar o campo de chamados anteriores se houver dados salvos
      if (orig.totalChamados30d || orig.encerramentoUltimoChamado || orig.tecnicoResponsavel) {
        const chamadosAnterioresBox = qs('#chamadosAnterioresBox', wrapper);
        if (chamadosAnterioresBox) {
          chamadosAnterioresBox.style.display = 'block';
        }
      }

      // Mostrar o campo de localização se o resultado for "validar no local"
      const resultadoSel = qs('[data-field="resultado"]', wrapper);
      if (resultadoSel && resultadoSel.value === "validar no local") {
        const localizacaoBox = qs('#localizacaoBox', wrapper);
        if (localizacaoBox) {
          localizacaoBox.style.display = 'flex';
        }
      }

      const aba = abas.find(x => x.id === id);
      if (aba) { aba.nomeTemp = (orig.nome ?? item.nome ?? 'Novo Cliente') || 'Novo Cliente'; renderAbas(); }

      ativarAba(id);
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }

    // ------------ Persistência relatos ------------
    function carregarRelatos() {
      try {
        const raw = localStorage.getItem('relatosSalvos');
        if (raw) {
          const arr = JSON.parse(raw);
          if (Array.isArray(arr)) {
            relatosSalvos.splice(0, relatosSalvos.length, ...arr);
          }
        }
      } catch {}
    }
    function persistirRelatos() { localStorage.setItem('relatosSalvos', JSON.stringify(relatosSalvos)); }

    // ------------ Boot ------------
    (function init() {
      if (localStorage.getItem('modo') === 'dark') {
        document.body.classList.add('dark');
      }
      carregarRelatos();
      desenharRelatos();
      carregarAbas();
      if (!abas.length) {
        novaAba();
      }
    })();
  </script>
</body>
</html>
